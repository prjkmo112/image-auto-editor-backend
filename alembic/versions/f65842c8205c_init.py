"""init

Revision ID: f65842c8205c
Revises:
Create Date: 2025-09-08 04:13:30.391770

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "f65842c8205c"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "source_images",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("file_path", sa.String(length=500), nullable=False),
        sa.Column("file_size", sa.BigInteger(), nullable=False),
        sa.Column("mime_type", sa.String(length=100), nullable=False),
        sa.Column("image_width", sa.Integer(), nullable=False),
        sa.Column("image_height", sa.Integer(), nullable=False),
        sa.Column("file_hash", sa.String(length=64), nullable=False),
        sa.Column("original_filename", sa.String(length=255), nullable=True),
        sa.Column(
            "status",
            sa.String(length=20),
            server_default=sa.text("'uploaded'::character varying"),
            nullable=True,
        ),
        sa.Column("tags", sa.ARRAY(sa.Text()), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="source_images_pkey"),
    )
    op.create_index(
        "idx_source_images_created_at",
        "source_images",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        "idx_source_images_file_hash",
        "source_images",
        ["file_hash"],
        unique=False,
    )
    op.create_index(
        "idx_source_images_status", "source_images", ["status"], unique=False
    )
    op.create_index(
        "idx_source_images_tags", "source_images", ["tags"], unique=False
    )
    op.create_table(
        "target_images",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column(
            "category",
            sa.String(length=50),
            server_default=sa.text("'general'::character varying"),
            nullable=False,
        ),
        sa.Column("file_path", sa.String(length=500), nullable=False),
        sa.Column("file_size", sa.BigInteger(), nullable=False),
        sa.Column("mime_type", sa.String(length=100), nullable=False),
        sa.Column("image_width", sa.Integer(), nullable=False),
        sa.Column("image_height", sa.Integer(), nullable=False),
        sa.Column("file_hash", sa.String(length=64), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "is_active",
            sa.Boolean(),
            server_default=sa.text("true"),
            nullable=True,
        ),
        sa.Column("tags", sa.ARRAY(sa.Text()), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="target_images_pkey"),
        sa.UniqueConstraint("file_hash", name="target_images_file_hash_key"),
    )
    op.create_index(
        "idx_target_images_active",
        "target_images",
        ["is_active"],
        unique=False,
    )
    op.create_index(
        "idx_target_images_category",
        "target_images",
        ["category"],
        unique=False,
    )
    op.create_index(
        "idx_target_images_created_at",
        "target_images",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        "idx_target_images_tags", "target_images", ["tags"], unique=False
    )
    op.create_table(
        "processing_jobs",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("source_image_id", sa.BigInteger(), nullable=False),
        sa.Column("job_type", sa.String(length=20), nullable=False),
        sa.Column(
            "status",
            sa.String(length=20),
            server_default=sa.text("'pending'::character varying"),
            nullable=True,
        ),
        sa.Column(
            "request_params",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("result_file_path", sa.String(length=500), nullable=True),
        sa.Column(
            "result_data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column(
            "error_details",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("processing_duration_ms", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["source_image_id"],
            ["source_images.id"],
            name="processing_jobs_source_image_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="processing_jobs_pkey"),
    )
    op.create_index(
        "idx_processing_jobs_created_at",
        "processing_jobs",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        "idx_processing_jobs_job_type",
        "processing_jobs",
        ["job_type"],
        unique=False,
    )
    op.create_index(
        "idx_processing_jobs_source_image",
        "processing_jobs",
        ["source_image_id"],
        unique=False,
    )
    op.create_index(
        "idx_processing_jobs_status",
        "processing_jobs",
        ["status"],
        unique=False,
    )
    op.create_index(
        "idx_processing_jobs_status_type",
        "processing_jobs",
        ["status", "job_type"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "idx_processing_jobs_status_type", table_name="processing_jobs"
    )
    op.drop_index("idx_processing_jobs_status", table_name="processing_jobs")
    op.drop_index(
        "idx_processing_jobs_source_image", table_name="processing_jobs"
    )
    op.drop_index("idx_processing_jobs_job_type", table_name="processing_jobs")
    op.drop_index(
        "idx_processing_jobs_created_at", table_name="processing_jobs"
    )
    op.drop_table("processing_jobs")
    op.drop_index("idx_target_images_tags", table_name="target_images")
    op.drop_index("idx_target_images_created_at", table_name="target_images")
    op.drop_index("idx_target_images_category", table_name="target_images")
    op.drop_index("idx_target_images_active", table_name="target_images")
    op.drop_table("target_images")
    op.drop_index("idx_source_images_tags", table_name="source_images")
    op.drop_index("idx_source_images_status", table_name="source_images")
    op.drop_index("idx_source_images_file_hash", table_name="source_images")
    op.drop_index("idx_source_images_created_at", table_name="source_images")
    op.drop_table("source_images")
    # ### end Alembic commands ###
